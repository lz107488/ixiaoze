<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>你的第一个获取空投项目白嫖 Telegram电报DOGS狗币 教程</title>
    <link href="/ixiaoze/2024/08/11/%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%A9%BA%E6%8A%95%E9%A1%B9%E7%9B%AE%E7%99%BD%E5%AB%96%20Telegram%E7%94%B5%E6%8A%A5DOGS%E7%8B%97%E5%B8%81%20%E6%95%99%E7%A8%8B/"/>
    <url>/ixiaoze/2024/08/11/%E4%BD%A0%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%8E%B7%E5%8F%96%E7%A9%BA%E6%8A%95%E9%A1%B9%E7%9B%AE%E7%99%BD%E5%AB%96%20Telegram%E7%94%B5%E6%8A%A5DOGS%E7%8B%97%E5%B8%81%20%E6%95%99%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>这个狗币主要是针对之前已经有电报账号的朋友，新注册的估计就不会拿到这个空投了。</p><p>DOGS 币是 TON 生态中的一个新项目。它以独特的黑白狗 Meme 形象和简单的参与机制，在 Telegram 上通过病毒式传播迅速吸引了大量用户。</p><p>参与 DOGS 项目的方式较为简单，用户只需加入 Telegram 的特定频道，dogsbot 机器人会根据用户的账号注册时间和活跃度进行评级，并据此分配积分，开通了 Telegram Premium 的用户还有额外积分奖励。</p><p><strong>获取方式</strong></p><p>1 科学地上网</p><p>2 浏览器打开下面这个链接：</p><p><a href="https://t.me/dogshouse_bot/join?startapp=i-0CQsXiTuqarZKVP3AmlQ">https://t.me/dogshouse_bot/join?startapp=i-0CQsXiTuqarZKVP3AmlQ</a></p><p>3 会跳转到打开电报的页面，点击打开</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/u0YrOUyJ6aSU7TTQEicnMc1G6MqGrp0bm3K8X2N5giaxCAicZ7t7YUzCX9Fq0wMfkka6O2NnibsReD2JyxfR1QmWYA/640?wx_fmt=other&from=appmsg&wxfrom=13&tp=wxpic" alt="图片"></p><p>4 进入之后会显示你拿到有多少个狗币（dogs）</p><p><img src="https://mmbiz.qpic.cn/mmbiz_jpg/u0YrOUyJ6aSU7TTQEicnMc1G6MqGrp0bmyKxjSQsef7yicibmicbgHDORJU2NXpdv79joicLTDdF3yWdt6wrZhbkwYw/640?wx_fmt=other&from=appmsg&tp=wxpic&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>我这个号创建大概有4年左右，拿到了3000个币。</p><p>那你能拿多少的币呢？</p><p>赶紧试试吧。</p><p>PS：无成本白嫖，不用支付任何费用，拿到币之后等交易所开通后就可以直接卖出了。</p><p>个人不建议进行无脑买入操作，毕竟空投不用成本，直接卖出，不管多少成本。</p>]]></content>
    
    
    <categories>
      
      <category>liunx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java,t.me</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本地部署VMware ESXi服务实现无公网IP远程访问</title>
    <link href="/ixiaoze/2024/08/11/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2VMware%20ESXi%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E6%97%A0%E5%85%AC%E7%BD%91IP%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/"/>
    <url>/ixiaoze/2024/08/11/%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2VMware%20ESXi%E6%9C%8D%E5%8A%A1%E5%AE%9E%E7%8E%B0%E6%97%A0%E5%85%AC%E7%BD%91IP%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在虚拟化技术日益成熟的今天，VMware ESXi以其卓越的性能和稳定性，成为了众多企业构建虚拟化环境的首选。然而，随着远程办公和跨地域管理的需求增加，如何高效地远程访问和管理部署在本地数据中心的ESXi服务器，成为了企业IT部门面临的重要挑战。</p><p>传统的远程访问方式往往受限于网络配置复杂、IP地址固定以及安全性能不足等问题，难以满足现代企业对于灵活、安全、高效的远程管理需求。为了解决这一难题，我们可以借助Cpolar内网穿透技术，将本地ESXi服务器的访问能力扩展到公网，实现随时随地的远程访问和管理。</p><p>Cpolar是一款功能强大的内网穿透工具，它通过建立加密的隧道连接，将局域网内的服务安全地暴露到公网上，无需公网IP，也无需复杂的网络配置。通过Cpolar，我们可以轻松地将本地ESXi服务器的管理接口映射到公网地址上，使得远程用户可以通过浏览器或其他管理工具，直接访问和管理ESXi服务器。</p><p>本文将重点介绍如何结合本地部署的VMware ESXi与Cpolar内网穿透技术，实现远程访问和管理本地ESXi服务器的具体步骤和配置方法。我们将从ESXi的安装与配置、Cpolar的安装与隧道创建、远程访问的实现与测试等方面进行详细阐述。</p><p><strong>如果已经下载安装好了ESXi ,可以直接跳到步骤 2 !</strong></p><h2 id="1-下载安装ESXi"><a href="#1-下载安装ESXi" class="headerlink" title="1. 下载安装ESXi"></a>1. 下载安装ESXi</h2><p>为了方便下载,可以选择一个第三方站点下载:<a href="https://www.pcsoft.com.cn/fmaurkq/30237711?module=soft&amp;t=website,%E8%BF%99%E4%B8%AA%E5%9C%B0%E5%9D%80%E5%B0%86%E4%BC%9A%E4%B8%8B%E8%BD%BD%E4%B8%80%E4%B8%AAESXi">https://www.pcsoft.com.cn/fmaurkq/30237711?module=soft&amp;t=website,这个地址将会下载一个ESXi</a> 7.0的版本,下载后解压可以看到一个ios的镜像文件,这个镜像文件就是下面我们需要在vmware安装时候用到 的镜像文件</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNOor8iaznWr9rZv8bmKF2Ack8cEC3ncqyu6sC6ia5RibdbqXLaeR2hJMBQ/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>接下来打开VMware,创建一个新的虚拟机</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrN2JaWXI2HjCmphjWxXtsCwvqDXKPz7k9PVhciaxKzgtA5xJRVDpiau68g/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>选择”典型”方式快捷安装,然后点击下一步</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNbwILchibL12Bmkc5NaJvXWUcnsY95rbayrtNBBicMjqZJCygwmvu2w2w/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这一步指定选择我们上面下载解压后看到的ESXi 的ios 镜像文件,指定选择后,点击下一步</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNSfIsXEibecNyElrMKxiaQR5Pq6glsHw5YeJkWR6p3dBjLmGOL0ic949MA/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>然后取个名称,再指定安装路径,点击下一步</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNiaibCjRUNk9qVBMlO3QkM1osRZhxGKzMSicZpmaaH7mmq5GAqoJI3ISFg/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>然后分配一个存储容量,这个可以自己指定,也可以默认,然后点击下一步</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNY2xHPcVP8iah6YDjwLIlZswIiarqAelxRV5cRIG4J1VcsUjM1DITqmlg/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>然后点击完成,虚拟机就创建好了</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNVq2oFogbsd9bFAVsVMwicdJrSzCe6wwBnNyxz19icibp4JgUDPHrHM7TQ/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>打开VMware 主界面,选择我们刚刚创建的ESXi 虚拟机,点击开启此虚拟机,下面等待进入安装界面</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNgvlxsm651LeHvcCx0Cea671pXVmLGk71AXHBlGtdfeWicvsNTMUuT8A/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>进入安装界面后,按”Enter” 回车键开始安装</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrN3ps4tN1ggHwnaC6KjZwbC11uuDP1bBGuCtveYd0VBbvicumib1LJ1Inw/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>然后按”F11” 键同意协议</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrN8okHdicHkbiabWKsljVlVPNTHZ9eXO63rxQIoXpF4CXroiczSuozxgtaA/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这里会显示我们上面创建虚拟机的时候分配的存储容量大小,再次按”Enter” 回车键继续即可</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNq7knyItziahtBa6UXnljIUcIZIqh5RaV8aKM2GibhjBjTDG99Lmt1VqQ/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>然后选择键盘,这里默认即可,再次按”Enter” 回车键继续</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNyrOibpJPoxg9fNbefKmc15Z3zEz9045KmR213bLsTysSoKXEyWcz21A/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>这里比较关键,这里是设置登录用户的密码.root是用户名,下面需要设置一个密码,输入第一遍后,按 ↓ 键输入第二遍密码,再次按”Enter” 回车键继续</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrN6eEc2tZx8DhdPq0nxPh8y5hpkuGJiaqeAZZ5nMAKcLgLCicyfrf62ACw/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>然后按”F11” 键开始安装,接下来等待安装即可</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNm9zDGZxHZCoicB2fIUohJeRj9R5ibyQnXLVQBWhxA0NEh41Bty8eicZTw/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>安装完成后,提示需要重启,再次按”Enter” 回车键重启</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrN6bkfV9hW7BpYQj1mhPWN6ERQDwibAps6vDzVGxDgn2TLgtwC3ROXAibA/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>重启后,我们可以看到上面是ESXi 的版本信息和自己处理器的信息,还出现了访问地址,<a href="https://192.168.126.131/">https://192.168.126.131</a> (具体地址以自己为准),安装就完成了,下面我们把这个地址输入到浏览器</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNwUC7FcCKq8iblCFfvvmadeIdnibZial4SF1bsPrmFPEIGfqVxVBkItxNw/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>输入浏览器后,可以看到访问成功了,如果提示不安全,直接选继续访问即可</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNw6ibYcS5X6G1DJQ1NNGPPrB1TweyZLC1icpXBpVUiagHiaQYOGP9ib5aq7w/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>输入用户名root,和我们上面设置的root用户对应的密码</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNszge6qBs7VKP3ResUzT0AvK1FDAeBo3L5A3yDzTdSzcP95lbJTicOZQ/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>可以看到登录进去了,本地下载ESXi 和安装就成功了,本地测试无误后,下面我们进行安装cpolar内网穿透软件,实现远程访问</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNTjAeYheMWlIZ7JC19QvndpDUKkvVlMbJkKqAWF8icO8YD1iba0RogiaSQ/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="2-安装Cpolar工具"><a href="#2-安装Cpolar工具" class="headerlink" title="2. 安装Cpolar工具"></a>2. 安装Cpolar工具</h2><p>ESXi 是运行在VMware 中,所以我们需要把Cpolar安装在Windows上,点击下面地址访问cpolar官网：<a href="https://www.cpolar.com/">https://www.cpolar.com/</a> 注册一个账号，然后下载并安装客户端.</p><blockquote><p>Cpolar下载界面：<a href="https://www.cpolar.com/download">https://www.cpolar.com/download</a></p></blockquote><ul><li><em>windows系统：在官网下载安装包后，双击安装包一路默认安装即可。</em></li></ul><p>cpolar安装成功后，在浏览器上访问本地9200端口【<a href="http://localhost:9200】，使用cpolar账号登录,即可看到Cpolar">http://localhost:9200】，使用cpolar账号登录,即可看到Cpolar</a> 管理界面,然后一切设置只需要在管理界面完成即可!</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNQtovdP4O7HP32iau2ogCyCm3jRFJ6PsWVbViajqxI7lic51oWB0x2yAibw/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="3-配置ESXi公网地址"><a href="#3-配置ESXi公网地址" class="headerlink" title="3. 配置ESXi公网地址"></a>3. 配置ESXi公网地址</h2><p>在管理界面点击左侧仪表盘的隧道管理——创建隧道，创建一个ESXi 的公网http地址隧道!</p><ul><li>隧道名称：可自定义命名，注意不要与已有的隧道名称重复</li><li>协议：选择http</li><li>本地地址：<a href="https://192.168.126.131/">https://192.168.126.131:443</a> (端口默认是 443,IP地址具体以自己的为准,这一个参数需要严格按照教程来设置,不要漏掉 “https:&#x2F;&#x2F;“ )</li><li>域名类型：免费选择随机域名</li><li>地区：选择China</li></ul><p>点击<code>创建</code>(点击一次创建按钮即可,不要重复点击!)</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNicJtAx3wWSOrkIMiaMnkak0qgdFsDcAIWHO73hicUHqUM9KJ347P4CVBA/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>隧道创建成功后，点击左侧的状态——在线隧道列表,查看所生成的公网访问地址，有两种访问方式,一种是http 和https,我们只需要选择https域名访问即可</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNLhkMDxiaB4hD9ofvqwWlgTvHyiaEwKGM0Am54XGrGDTeepuFCxvoW5IQ/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><h2 id="4-远程访问ESXi"><a href="#4-远程访问ESXi" class="headerlink" title="4. 远程访问ESXi"></a>4. 远程访问ESXi</h2><p>在浏览器输入上面我们创建的Cpolar 公网https域名,可以看到同样访问成功了,输入对应的账号密码,点击登录</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNMlFwV8JqXOLJmg9IlsG3gv6SIPOTIwcGorxal6XgqAyMtEvaP1qDlA/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>可以看到也是登录成功了,公网远程访问设置就成功完成了,使用该域名可以在任意设备上访问本地ESXi 管理界面!</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNkibnEVvTibEa3BoocqbfSJNLjKzecHLIVcHtSZ2P2llHbAsiciaqQ8FG1g/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p><strong>小结</strong></p><p>为了更好地演示，我们在前述过程中使用了cpolar生成的隧道，其公网地址是随机生成的。</p><p>这种随机地址的优势在于建立速度快，可以立即使用。然而，它的缺点是网址由随机字符生成，不太容易记忆（例如：3ad5da5.r10.cpolar.cn）。另外，这个地址在24小时内会发生随机变化，更适合于临时使用。</p><p>我一般会使用固定二级子域名，原因是我希望将网址发送给同事或客户时，它是一个固定、易记的公网地址（例如：esxi7test.cpolar.cn），这样更显正式，便于流交协作。</p><h2 id="5-固定ESXi公网地址"><a href="#5-固定ESXi公网地址" class="headerlink" title="5. 固定ESXi公网地址"></a>5. 固定ESXi公网地址</h2><p>由于以上使用Cpolar所创建的隧道使用的是随机公网地址，24小时内会随机变化，不利于长期远程访问。因此我们可以为其配置二级子域名，该地址为固定地址，不会随机变化【ps：cpolar.cn已备案】</p><blockquote><p>注意需要将cpolar套餐升级至基础套餐或以上，且每个套餐对应的带宽不一样。【cpolar.cn已备案】</p></blockquote><p>点击进入和登录Cpolar官网，点击左侧的预留，选择保留二级子域名，设置一个二级子域名名称，点击保留</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNYibuCVwTIm5DOMxxMIJibGdZ74FoibSx52zkicOx1DkQcnRlQrc27CRvfQ/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>保留成功后复制保留成功的二级子域名的名称</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNB8SxNIlVz7aWxrS3R5E47dOBsRDuqiaVToNkibTpJ20lPfSAadTPLiakQ/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>返回登录cpolar web UI管理界面，点击左侧仪表盘的隧道管理——隧道列表，找到所要配置的隧道，点击右侧的编辑</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNCH04N4GNK3uoXP3ohBbGBHqdjB4Q4AyKj9Xp3YLLgQVRfiaCgva0fjg/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>修改隧道信息，将保留成功的二级子域名配置到隧道中</p><ul><li>域名类型：选择二级子域名</li><li>Sub Domain：填写保留成功的二级子域名</li></ul><p>点击<code>更新</code>(注意,点击一次更新即可,不需要重复提交)</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrN5ibBrlyL0O0wV9NNKlfYLJjXUrBIWaJcfkicwwsD2XtAFFrNiaibFBnX6A/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>更新完成后,打开在线隧道列表,此时可以看到公网地址已经发生变化,地址二级名称变成了我们自己设置的二级子域名名称</p><p><img src="https://mmbiz.qpic.cn/sz_mmbiz_png/tSa9O9IXorwEzxxHDtG9R4NUOebAISrNqJfDvibvMO6iaqz074xNFLmjlg3IqPyRmbtzricegVgYGSACXWN2Uw0SA/640?wx_fmt=png&from=appmsg&tp=webp&wxfrom=5&wx_lazy=1&wx_co=1" alt="图片"></p><p>再次打开浏览器,输入我们固定的cpolar公网地址,可以看到同样访问成功了,如果访问慢,可以按F12打开控制台刷新几次再看看!,这样一个固定的地址就设置好了,不用再担心地址会变化.</p>]]></content>
    
    
    <categories>
      
      <category>liunx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java,VMware</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/ixiaoze/2023/11/11/%E7%83%AD%E9%97%A8%E6%A1%86%E6%9E%B6-Maven-day02%E7%AC%94%E8%AE%B0/"/>
    <url>/ixiaoze/2023/11/11/%E7%83%AD%E9%97%A8%E6%A1%86%E6%9E%B6-Maven-day02%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img-blog.csdnimg.cn/e566763a259a4853b6244597b24fe811.png#pic_center" alt="在这里插入图片描述"></p><h2 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h2><ul><li>了解 Maven 是什么，为什么要使用 Maven。</li><li>掌握 Maven 安装及配置。</li><li>熟悉 Maven 项目目录结构，知道什么类型文件放到什么目录里。</li><li>掌握在开发工具中搭建基于 Maven 构建 JavaSE 项目。</li><li>掌握在开发工具中搭建基于 Maven 构建 JavaWeb 项目。</li></ul><h1 id="一、初始-Maven（了解）"><a href="#一、初始-Maven（了解）" class="headerlink" title="一、初始 Maven（了解）"></a>一、初始 Maven（了解）</h1><h2 id="1、项目遇到的问题"><a href="#1、项目遇到的问题" class="headerlink" title="1、项目遇到的问题"></a>1、项目遇到的问题</h2><ul><li>构建：编译代码，运行测试，打包，部署应用，运行服务器等；</li><li>依赖：项目依赖大量的第三方包，第三方包又依赖另外的包，对依赖包的管理非常麻烦。</li></ul><h2 id="2、Maven-定义和作用"><a href="#2、Maven-定义和作用" class="headerlink" title="2、Maven 定义和作用"></a>2、Maven 定义和作用</h2><ul><li>Maven 翻译为“知识的积累”，“专家”，“行家”，是一个跨平台的项目管理工具；</li><li>Maven 主要用作基于 Java 平台的项目（Maven 本身也是 Java 编写的）的构建、依赖包管理和项目信息管理；</li><li>Maven 能提供<strong>一种项目的配置</strong>，配置好的项目，只需要运行一条简单的命令，就能完成重复的，繁琐的构建动作；</li><li>Maven 能提供一种项目的依赖配置，配置好的项目，Maven 能自动的<strong>从 Maven 的中央仓库中帮我们下载并管理项目依赖的 jar 包</strong>，并且还能自动的管理这些 jar 包依赖的其他 jar 包；</li><li>Maven 提供了一种<strong>标准的项目目录结构</strong>，测试命名规则等项目的最佳实践方案，统一了不同项目的学习成本（约定大于配置）。</li></ul><h1 id="二、Maven-安装（掌握）"><a href="#二、Maven-安装（掌握）" class="headerlink" title="二、Maven 安装（掌握）"></a>二、Maven 安装（掌握）</h1><h2 id="1、检查-JDK-的版本"><a href="#1、检查-JDK-的版本" class="headerlink" title="1、检查 JDK 的版本"></a>1、检查 JDK 的版本</h2><p>因为 Maven 不同的版本对 JDK 是有要求的，具体请看<a href="https://maven.apache.org/docs/history.html">官网</a>。<br>在命令行输入 java  -version，查询安装 JDK 是否正确并查询安装的版本。若没有配置好的话，按照一下步骤配置好：</p><ul><li>添加 JAVA_HOME，需要指向 JDK 安装目录；</li><li>添加 PATH，添加 %JAVA_HOME%\bin。</li></ul><h2 id="2、安装-Maven"><a href="#2、安装-Maven" class="headerlink" title="2、安装 Maven"></a>2、安装 Maven</h2><p>把 apache-maven-x.x.x-bin.zip 解压到目录中（<strong>目录路径最好不要有空格和中文</strong>）。</p><h2 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h2><ul><li>配置环境变量，MAVEN_HOME，指向 maven 的根目录；</li><li>配置环境变量 Path，将 %MAVEN_HOME%\bin 追加到 Path 中。</li></ul><h3 id="3-1、Win7-配置"><a href="#3-1、Win7-配置" class="headerlink" title="3.1、Win7 配置"></a>3.1、Win7 配置</h3><p><img src="https://img-blog.csdnimg.cn/a0f519a555cf4a08ba47d6ed63b4bcd6.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/768fc29b6f0d48158ded3d55790f02fa.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/24acc936ae794fa386c5396f927fb333.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-2、Win10-配置"><a href="#3-2、Win10-配置" class="headerlink" title="3.2、Win10 配置"></a>3.2、Win10 配置</h3><p><img src="https://img-blog.csdnimg.cn/19afee76184546dab2a865d177334372.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2d60f9b3675d490fa332f1a529ee577d.png#pic_center" alt="在这里插入图片描述"></p><h2 id="4、验证-Maven-安装"><a href="#4、验证-Maven-安装" class="headerlink" title="4、验证 Maven 安装"></a>4、验证 Maven 安装</h2><p>打开命令行窗口，输入入 mvn –v 执行，若执行类似如下效果即代表安装成功。<br><img src="https://img-blog.csdnimg.cn/64e7c127284d472686c776eb500fd558.png#pic_center" alt="在这里插入图片描述"></p><h1 id="三、Maven-Hello-World（了解）"><a href="#三、Maven-Hello-World（了解）" class="headerlink" title="三、Maven Hello World（了解）"></a>三、Maven Hello World（了解）</h1><p><img src="https://img-blog.csdnimg.cn/99b4bb184e2d434f9fab822407fbe370.png#pic_center" alt="在这里插入图片描述"></p><p>把事先准备好的 Maven 项目，在命令行下输入命令试下：</p><ul><li>mvn compile：编译</li><li>mvn clean：清除</li><li>mvn test：测试</li><li>mvn package：打包</li><li>mvn install：打包，本地仓库也放一份</li></ul><h1 id="四、Maven-设置（掌握）"><a href="#四、Maven-设置（掌握）" class="headerlink" title="四、Maven 设置（掌握）"></a>四、Maven 设置（掌握）</h1><h2 id="1、本地仓库"><a href="#1、本地仓库" class="headerlink" title="1、本地仓库"></a>1、本地仓库</h2><p>运行过 Maven 命令才会在你的用户目录生成一个 .m2 目录，该目录下有个目录名 repository，这个就是所谓的本地仓库，主要存放是一些下载的 jar 文件。</p><p>本地仓库默认位置在用户目录&#x2F;.m2&#x2F;repository，本地仓库不建议在系统盘，最佳实践：</p><ul><li>将 Maven 根目录的 conf&#x2F;settings.xml 拷贝到 .m2 中，作为个人 Maven 配置文件；</li><li>在 settings.xml 文件中 <localRepository> 修改本地仓库的位置。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 本地仓库地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>你本地仓库的目录位置<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、配置中央仓库镜像"><a href="#2、配置中央仓库镜像" class="headerlink" title="2、配置中央仓库镜像"></a>2、配置中央仓库镜像</h2><p>在有网情况下，官方中央仓库服务器在国外，所以很大可能出现下载失败的问题，所以我们配置一个中央仓库的镜像来降低下载失败的概率。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 本地仓库地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>你本地仓库的目录位置<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 阿里仓库镜像 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="五、IDEA-中-Maven-的配置（掌握）"><a href="#五、IDEA-中-Maven-的配置（掌握）" class="headerlink" title="五、IDEA 中 Maven 的配置（掌握）"></a>五、IDEA 中 Maven 的配置（掌握）</h1><p>配置安装的 Maven，设置 setttings.xml 和本地仓库。</p><p><img src="https://img-blog.csdnimg.cn/1bba37d1c48540259b2fbdf6d67915c0.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1a83e83675a2419e9eb59febe2aab6bb.png#pic_center" alt="在这里插入图片描述"></p><h1 id="六、搭建基于-Maven-构建的-JavaSE-项目（掌握）"><a href="#六、搭建基于-Maven-构建的-JavaSE-项目（掌握）" class="headerlink" title="六、搭建基于 Maven 构建的 JavaSE 项目（掌握）"></a>六、搭建基于 Maven 构建的 JavaSE 项目（掌握）</h1><h2 id="1、创建项目"><a href="#1、创建项目" class="headerlink" title="1、创建项目"></a>1、创建项目</h2><h3 id="1-1、选择建的是-Maven-项目"><a href="#1-1、选择建的是-Maven-项目" class="headerlink" title="1.1、选择建的是 Maven 项目"></a>1.1、选择建的是 Maven 项目</h3><p><img src="https://img-blog.csdnimg.cn/d1cdd4da994c4ab18add1c66806f3f30.png#pic_center" alt="在这里插入图片描述"></p><p>确定后之后点击 Next。</p><h3 id="1-2、填写对应项目信息"><a href="#1-2、填写对应项目信息" class="headerlink" title="1.2、填写对应项目信息"></a>1.2、填写对应项目信息</h3><p><img src="https://img-blog.csdnimg.cn/047b5379dd2f439da4ec54097f1570e6.png#pic_center" alt="在这里插入图片描述"></p><p>填完之后点击 Next。</p><h3 id="1-3、确定项目存储位置"><a href="#1-3、确定项目存储位置" class="headerlink" title="1.3、确定项目存储位置"></a>1.3、确定项目存储位置</h3><p><img src="https://img-blog.csdnimg.cn/a7ea618837ed4475ad51efebc18fd662.png#pic_center" alt="在这里插入图片描述"></p><p>确定完之后点击 Finish，之后工具会打开解析项目，要等一会儿。</p><h2 id="2、pom-xml-文件"><a href="#2、pom-xml-文件" class="headerlink" title="2、pom.xml 文件"></a>2、pom.xml 文件</h2><p>用于填写项目信息，打包方式，添加依赖及插件等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.wolfcode<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-se<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、添加依赖"><a href="#3、添加依赖" class="headerlink" title="3、添加依赖"></a>3、添加依赖</h2><h3 id="3-1、利用索引添加依赖"><a href="#3-1、利用索引添加依赖" class="headerlink" title="3.1、利用索引添加依赖"></a>3.1、利用索引添加依赖</h3><p>所谓建索引，就对本地仓库的依赖建立索引，若本地仓库存在 10 个依赖，那么在添加的时候可以搜索得出来，很方便在 pom.xml 添加。但注意搜索得出来是本地仓库已有的前提下。而这个索引在 IDEA 开发工具会自动建好，直接使用即可。</p><h4 id="3-1-1、添加-dependencies-元素"><a href="#3-1-1、添加-dependencies-元素" class="headerlink" title="3.1.1、添加 dependencies 元素"></a>3.1.1、添加 dependencies 元素</h4><p>![外链图片转存失败,源站</p><h4 id="3-1-2、添加-dependency-元素"><a href="#3-1-2、添加-dependency-元素" class="headerlink" title="3.1.2、添加 dependency 元素"></a>3.1.2、添加 dependency 元素</h4><p><img src="https://img-blog.csdnimg.cn/d63ac9c48a794e04a5b06dcf485fa931.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-1-3、填选依赖名称"><a href="#3-1-3、填选依赖名称" class="headerlink" title="3.1.3、填选依赖名称"></a>3.1.3、填选依赖名称</h4><p><img src="https://img-blog.csdnimg.cn/6053a7632fb648968252da0e672dbacf.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-1-4、选择依赖的版本"><a href="#3-1-4、选择依赖的版本" class="headerlink" title="3.1.4、选择依赖的版本"></a>3.1.4、选择依赖的版本</h4><p><img src="https://img-blog.csdnimg.cn/0eb2770b24d6450cbb201fb9c43ed0c2.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-1-5、填写依赖的作用域"><a href="#3-1-5、填写依赖的作用域" class="headerlink" title="3.1.5、填写依赖的作用域"></a>3.1.5、填写依赖的作用域</h4><p><img src="https://img-blog.csdnimg.cn/9193e9c4be32429ba10f19531c4810a0.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-1-6、让工具自动解析修改的内容"><a href="#3-1-6、让工具自动解析修改的内容" class="headerlink" title="3.1.6、让工具自动解析修改的内容"></a>3.1.6、让工具自动解析修改的内容</h4><p><img src="https://img-blog.csdnimg.cn/f69137868d6448d380c84488817d7a1b.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-1-7、验证依赖添加成功"><a href="#3-1-7、验证依赖添加成功" class="headerlink" title="3.1.7、验证依赖添加成功"></a>3.1.7、验证依赖添加成功</h4><p><img src="https://img-blog.csdnimg.cn/ee19312c7280450091e292f724e0b247.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-2、网站搜索拷贝添加依赖"><a href="#3-2、网站搜索拷贝添加依赖" class="headerlink" title="3.2、网站搜索拷贝添加依赖"></a>3.2、网站搜索拷贝添加依赖</h3><p><a href="https://mvnrepository.com/">搜索依赖的网站</a>。<br><img src="https://img-blog.csdnimg.cn/a523f5c396b9443ab3e84db2f111780e.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-2-1、在搜索栏中输入要添加的依赖"><a href="#3-2-1、在搜索栏中输入要添加的依赖" class="headerlink" title="3.2.1、在搜索栏中输入要添加的依赖"></a>3.2.1、在搜索栏中输入要添加的依赖</h4><p><img src="https://img-blog.csdnimg.cn/5eabe2aa88bd4b829d37134faa4acdfe.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-2-2、选择所要的依赖和其版本"><a href="#3-2-2、选择所要的依赖和其版本" class="headerlink" title="3.2.2、选择所要的依赖和其版本"></a>3.2.2、选择所要的依赖和其版本</h4><p><img src="https://img-blog.csdnimg.cn/3ccdca8c23a746ea911fcd36a48cc44e.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-2-3、拷贝对应配置到-pom-xml-中"><a href="#3-2-3、拷贝对应配置到-pom-xml-中" class="headerlink" title="3.2.3、拷贝对应配置到 pom.xml 中"></a>3.2.3、拷贝对应配置到 pom.xml 中</h4><p><img src="https://img-blog.csdnimg.cn/516efe6aae9e4996ba9b99f56f7d6d00.png#pic_center" alt="在这里插入图片描述"></p><h2 id="4、使用-Maven-命令"><a href="#4、使用-Maven-命令" class="headerlink" title="4、使用 Maven 命令"></a>4、使用 Maven 命令</h2><p>在 Maven Projects 窗口，双击对应命令即可：</p><p><img src="https://img-blog.csdnimg.cn/0622ddc202054e598b052290bf9774ea.png#pic_center" alt="在这里插入图片描述"></p><h1 id="七、搭建基于-Maven-构建的-JavaWeb-项目（掌握）"><a href="#七、搭建基于-Maven-构建的-JavaWeb-项目（掌握）" class="headerlink" title="七、搭建基于 Maven 构建的 JavaWeb 项目（掌握）"></a>七、搭建基于 Maven 构建的 JavaWeb 项目（掌握）</h1><h2 id="1、创建项目-1"><a href="#1、创建项目-1" class="headerlink" title="1、创建项目"></a>1、创建项目</h2><h3 id="1-1、选择建的是-Maven-项目-1"><a href="#1-1、选择建的是-Maven-项目-1" class="headerlink" title="1.1、选择建的是 Maven 项目"></a>1.1、选择建的是 Maven 项目</h3><p><img src="https://img-blog.csdnimg.cn/ab875973d0cc44b08a3d55f7ecccd982.png#pic_center" alt="在这里插入图片描述"></p><p>确定后之后点击 Next。</p><h3 id="1-2、填写对应项目信息-1"><a href="#1-2、填写对应项目信息-1" class="headerlink" title="1.2、填写对应项目信息"></a>1.2、填写对应项目信息</h3><p><img src="https://img-blog.csdnimg.cn/ce7d100b25ca402cb4cbbc87c8b9a477.png#pic_center" alt="在这里插入图片描述"></p><p>填完之后点击 Next。</p><h3 id="1-3、确定项目存储位置-1"><a href="#1-3、确定项目存储位置-1" class="headerlink" title="1.3、确定项目存储位置"></a>1.3、确定项目存储位置</h3><p><img src="https://img-blog.csdnimg.cn/a580365c286241b697d811e6fde1ed34.png#pic_center" alt="在这里插入图片描述"></p><p>确定完之后点击 Finish，之后工具会打开解析项目，要等一会儿。</p><h3 id="1-4、修改项目打包方式"><a href="#1-4、修改项目打包方式" class="headerlink" title="1.4、修改项目打包方式"></a>1.4、修改项目打包方式</h3><p>在 pom.xml 修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.wolfcode<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 修改项目打包方式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、添加-web-xml"><a href="#2、添加-web-xml" class="headerlink" title="2、添加 web.xml"></a>2、添加 web.xml</h2><p>自己手动在项目的 main 目录下建 webapp&#x2F;WEB-INF&#x2F;web.xml 文件，拷贝如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、修改项目编译运行版本"><a href="#3、修改项目编译运行版本" class="headerlink" title="3、修改项目编译运行版本"></a>3、修改项目编译运行版本</h2><p>在 pom.xml 配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4、添加依赖"><a href="#4、添加依赖" class="headerlink" title="4、添加依赖"></a>4、添加依赖</h2><p>在 pom.xml 文件添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置 servlet-api 依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 记得一定配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5、编写-Servlet-与-JSP"><a href="#5、编写-Servlet-与-JSP" class="headerlink" title="5、编写 Servlet 与 JSP"></a>5、编写 Servlet 与 JSP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;你好 Maven&quot;</span>);<br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/a.jsp&quot;</span>).forward(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Maven&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    $&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="6、配置-Tomcat-插件"><a href="#6、配置-Tomcat-插件" class="headerlink" title="6、配置 Tomcat 插件"></a>6、配置 Tomcat 插件</h2><p>在 pom.xml 添加如下插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span> <span class="hljs-comment">&lt;!-- 端口 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span> <span class="hljs-comment">&lt;!-- 上下路径 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">uriEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">uriEncoding</span>&gt;</span> <span class="hljs-comment">&lt;!-- 针对 GET 方式乱码处理 --&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7、启动项目"><a href="#7、启动项目" class="headerlink" title="7、启动项目"></a>7、启动项目</h2><p><img src="https://img-blog.csdnimg.cn/b12a8450e934474cbed22e19ff76e8ad.png#pic_center" alt="在这里插入图片描述"></p><h1 id="八、概念解释（了解）"><a href="#八、概念解释（了解）" class="headerlink" title="八、概念解释（了解）"></a>八、概念解释（了解）</h1><h2 id="1、坐标"><a href="#1、坐标" class="headerlink" title="1、坐标"></a>1、坐标</h2><h3 id="1-1、数学中的坐标"><a href="#1-1、数学中的坐标" class="headerlink" title="1.1、数学中的坐标"></a>1.1、数学中的坐标</h3><p>在空间中，使用 X、Y、Z 三个向量可以唯一的定位空间中的任意一个点。</p><h3 id="1-2、Maven-中的坐标"><a href="#1-2、Maven-中的坐标" class="headerlink" title="1.2、Maven 中的坐标"></a>1.2、Maven 中的坐标</h3><p>标识项目或者依赖在仓库中的位置。主要由下面构成：</p><ul><li>groupId：项目名称，一般使用公司或组织域名倒写，域名具有唯一性，区分不同公司；</li><li>artifactId：项目中 Maven 项目&#x2F;模块名称，区分同一个公司的项目；</li><li>version：项目版本，区分同一个项目不同时期的特点。</li></ul><h2 id="2、依赖"><a href="#2、依赖" class="headerlink" title="2、依赖"></a>2、依赖</h2><p>配置项目所要依赖的 jar，在 pom.xml 使用 dependency 元素配置，通过坐标先从本地仓库找，若没有再从远程仓库找。</p><h3 id="2-1、scope"><a href="#2-1、scope" class="headerlink" title="2.1、scope"></a>2.1、scope</h3><p>Maven 在编译，测试，运行的时候，各需要一套 classpath（比如编译的时候会有编译的 classpath，测试的时候会有测试的 classpath）。scope 表明该依赖的项目和三个 classpath 的关系，即表示依赖什么阶段起作用，什么阶段不起作用。</p><p>scope 主要可选值：</p><ul><li>compile：默认，适用于所有阶段，会随着项目一起发布，在编译，测试，运行时都有效；</li><li>provided：编译和测试阶段使用；典型的如 servlet-api.jar，打包时不需要，容器来提供；</li><li>runtime：测试和运行阶段使用，用于接口和实现分离，典型的如 jdbc 具体驱动实现；</li><li>test：测试阶段使用，不会随项目发布，如 junit。<br><img src="https://img-blog.csdnimg.cn/e9ffbaa60d084426bd234350c83cde59.png#pic_center" alt="在这里插入图片描述"></li></ul><h3 id="2-2、传递性"><a href="#2-2、传递性" class="headerlink" title="2.2、传递性"></a>2.2、传递性</h3><p>Maven 的依赖是具有传递性的，比如 A -&gt; B，B -&gt; C，那么 A 间接的依赖于 C，这就是依赖的传递性，其中 A 对于 B 是第一直接依赖，B 对于 C 是第二直接依赖，C 为 A 的传递性依赖。依赖的传递性可以解决依赖繁琐的问题。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul><li>画标准 Maven 项目树状结构图，并标识什么目录里面放置什么文件。</li><li>完成 Maven 安装及配置。</li><li>完成在开发工具中搭建 Maven 构建 JavaSE 项目，编写编写一个测试类，打印当前系统时间。</li><li>完成在开发工具中使用 Maven 构建 JavaWeb 项目，能处理路径为 &#x2F;hello 请求 ，响应 HTML 格式内容，页面显示 Hello Maven。</li><li>完成对之前 Web CRUD 项目进行改造，使用 Maven 来构建。<br>13878003)]</li></ul><h3 id="2-2、传递性-1"><a href="#2-2、传递性-1" class="headerlink" title="2.2、传递性"></a>2.2、传递性</h3><p>Maven 的依赖是具有传递性的，比如 A -&gt; B，B -&gt; C，那么 A 间接的依赖于 C，这就是依赖的传递性，其中 A 对于 B 是第一直接依赖，B 对于 C 是第二直接依赖，C 为 A 的传递性依赖。依赖的传递性可以解决依赖繁琐的问题。</p><h1 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h1><ul><li>画标准 Maven 项目树状结构图，并标识什么目录里面放置什么文件。</li><li>完成 Maven 安装及配置。</li><li>完成在开发工具中搭建 Maven 构建 JavaSE 项目，编写编写一个测试类，打印当前系统时间。</li><li>完成在开发工具中使用 Maven 构建 JavaWeb 项目，能处理路径为 &#x2F;hello 请求 ，响应 HTML 格式内容，页面显示 Hello Maven。</li><li>完成对之前 Web CRUD 项目进行改造，使用 Maven 来构建。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Maven 项目</title>
    <link href="/ixiaoze/2023/11/11/%E7%83%AD%E9%97%A8%E6%A1%86%E6%9E%B6-Maven%E7%AC%94%E8%AE%B0/"/>
    <url>/ixiaoze/2023/11/11/%E7%83%AD%E9%97%A8%E6%A1%86%E6%9E%B6-Maven%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<ul><li><p>﻿<img src="https://img-blog.csdnimg.cn/e566763a259a4853b6244597b24fe811.png#pic_center" alt="在这里插入图片描述"></p><h2 id="课程目标"><a href="#课程目标" class="headerlink" title="课程目标"></a>课程目标</h2><ul><li>了解 Maven 是什么，为什么要使用 Maven。</li><li>掌握 Maven 安装及配置。</li><li>熟悉 Maven 项目目录结构，知道什么类型文件放到什么目录里。</li><li>掌握在开发工具中搭建基于 Maven 构建 JavaSE 项目。</li><li>掌握在开发工具中搭建基于 Maven 构建 JavaWeb 项目。</li></ul><h1 id="一、初始-Maven（了解）"><a href="#一、初始-Maven（了解）" class="headerlink" title="一、初始 Maven（了解）"></a>一、初始 Maven（了解）</h1><h2 id="1、项目遇到的问题"><a href="#1、项目遇到的问题" class="headerlink" title="1、项目遇到的问题"></a>1、项目遇到的问题</h2><ul><li>构建：编译代码，运行测试，打包，部署应用，运行服务器等；</li><li>依赖：项目依赖大量的第三方包，第三方包又依赖另外的包，对依赖包的管理非常麻烦。</li></ul><h2 id="2、Maven-定义和作用"><a href="#2、Maven-定义和作用" class="headerlink" title="2、Maven 定义和作用"></a>2、Maven 定义和作用</h2><ul><li>Maven 翻译为“知识的积累”，“专家”，“行家”，是一个跨平台的项目管理工具；</li><li>Maven 主要用作基于 Java 平台的项目（Maven 本身也是 Java 编写的）的构建、依赖包管理和项目信息管理；</li><li>Maven 能提供<strong>一种项目的配置</strong>，配置好的项目，只需要运行一条简单的命令，就能完成重复的，繁琐的构建动作；</li><li>Maven 能提供一种项目的依赖配置，配置好的项目，Maven 能自动的<strong>从 Maven 的中央仓库中帮我们下载并管理项目依赖的 jar 包</strong>，并且还能自动的管理这些 jar 包依赖的其他 jar 包；</li><li>Maven 提供了一种<strong>标准的项目目录结构</strong>，测试命名规则等项目的最佳实践方案，统一了不同项目的学习成本（约定大于配置）。</li></ul><h1 id="二、Maven-安装（掌握）"><a href="#二、Maven-安装（掌握）" class="headerlink" title="二、Maven 安装（掌握）"></a>二、Maven 安装（掌握）</h1><h2 id="1、检查-JDK-的版本"><a href="#1、检查-JDK-的版本" class="headerlink" title="1、检查 JDK 的版本"></a>1、检查 JDK 的版本</h2><p>因为 Maven 不同的版本对 JDK 是有要求的，具体请看<a href="https://maven.apache.org/docs/history.html">官网</a>。<br>在命令行输入 java  -version，查询安装 JDK 是否正确并查询安装的版本。若没有配置好的话，按照一下步骤配置好：</p><ul><li>添加 JAVA_HOME，需要指向 JDK 安装目录；</li><li>添加 PATH，添加 %JAVA_HOME%\bin。</li></ul><h2 id="2、安装-Maven"><a href="#2、安装-Maven" class="headerlink" title="2、安装 Maven"></a>2、安装 Maven</h2><p>把 apache-maven-x.x.x-bin.zip 解压到目录中（<strong>目录路径最好不要有空格和中文</strong>）。</p><h2 id="3、配置环境变量"><a href="#3、配置环境变量" class="headerlink" title="3、配置环境变量"></a>3、配置环境变量</h2><ul><li>配置环境变量，MAVEN_HOME，指向 maven 的根目录；</li><li>配置环境变量 Path，将 %MAVEN_HOME%\bin 追加到 Path 中。</li></ul><h3 id="3-1、Win7-配置"><a href="#3-1、Win7-配置" class="headerlink" title="3.1、Win7 配置"></a>3.1、Win7 配置</h3><p><img src="https://img-blog.csdnimg.cn/a0f519a555cf4a08ba47d6ed63b4bcd6.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/768fc29b6f0d48158ded3d55790f02fa.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/24acc936ae794fa386c5396f927fb333.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-2、Win10-配置"><a href="#3-2、Win10-配置" class="headerlink" title="3.2、Win10 配置"></a>3.2、Win10 配置</h3><p><img src="https://img-blog.csdnimg.cn/19afee76184546dab2a865d177334372.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/2d60f9b3675d490fa332f1a529ee577d.png#pic_center" alt="在这里插入图片描述"></p><h2 id="4、验证-Maven-安装"><a href="#4、验证-Maven-安装" class="headerlink" title="4、验证 Maven 安装"></a>4、验证 Maven 安装</h2><p>打开命令行窗口，输入入 mvn –v 执行，若执行类似如下效果即代表安装成功。<br><img src="https://img-blog.csdnimg.cn/64e7c127284d472686c776eb500fd558.png#pic_center" alt="在这里插入图片描述"></p><h1 id="三、Maven-Hello-World（了解）"><a href="#三、Maven-Hello-World（了解）" class="headerlink" title="三、Maven Hello World（了解）"></a>三、Maven Hello World（了解）</h1><p><img src="https://img-blog.csdnimg.cn/99b4bb184e2d434f9fab822407fbe370.png#pic_center" alt="在这里插入图片描述"></p><p>把事先准备好的 Maven 项目，在命令行下输入命令试下：</p><ul><li>mvn compile：编译</li><li>mvn clean：清除</li><li>mvn test：测试</li><li>mvn package：打包</li><li>mvn install：打包，本地仓库也放一份</li></ul><h1 id="四、Maven-设置（掌握）"><a href="#四、Maven-设置（掌握）" class="headerlink" title="四、Maven 设置（掌握）"></a>四、Maven 设置（掌握）</h1><h2 id="1、本地仓库"><a href="#1、本地仓库" class="headerlink" title="1、本地仓库"></a>1、本地仓库</h2><p>运行过 Maven 命令才会在你的用户目录生成一个 .m2 目录，该目录下有个目录名 repository，这个就是所谓的本地仓库，主要存放是一些下载的 jar 文件。</p><p>本地仓库默认位置在用户目录&#x2F;.m2&#x2F;repository，本地仓库不建议在系统盘，最佳实践：</p><ul><li>将 Maven 根目录的 conf&#x2F;settings.xml 拷贝到 .m2 中，作为个人 Maven 配置文件；</li><li>在 settings.xml 文件中 <localRepository> 修改本地仓库的位置。</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 本地仓库地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>你本地仓库的目录位置<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、配置中央仓库镜像"><a href="#2、配置中央仓库镜像" class="headerlink" title="2、配置中央仓库镜像"></a>2、配置中央仓库镜像</h2><p>在有网情况下，官方中央仓库服务器在国外，所以很大可能出现下载失败的问题，所以我们配置一个中央仓库的镜像来降低下载失败的概率。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">settings</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">          <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 本地仓库地址 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">localRepository</span>&gt;</span>你本地仓库的目录位置<span class="hljs-tag">&lt;/<span class="hljs-name">localRepository</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mirrors</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 阿里仓库镜像 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mirror</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">id</span>&gt;</span>alimaven<span class="hljs-tag">&lt;/<span class="hljs-name">id</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>aliyun maven<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="hljs-tag">&lt;/<span class="hljs-name">url</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">mirrorOf</span>&gt;</span>central<span class="hljs-tag">&lt;/<span class="hljs-name">mirrorOf</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">mirror</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mirrors</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">settings</span>&gt;</span><br></code></pre></td></tr></table></figure><h1 id="五、IDEA-中-Maven-的配置（掌握）"><a href="#五、IDEA-中-Maven-的配置（掌握）" class="headerlink" title="五、IDEA 中 Maven 的配置（掌握）"></a>五、IDEA 中 Maven 的配置（掌握）</h1><p>配置安装的 Maven，设置 setttings.xml 和本地仓库。</p><p><img src="https://img-blog.csdnimg.cn/1bba37d1c48540259b2fbdf6d67915c0.png#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1a83e83675a2419e9eb59febe2aab6bb.png#pic_center" alt="在这里插入图片描述"></p><h1 id="六、搭建基于-Maven-构建的-JavaSE-项目（掌握）"><a href="#六、搭建基于-Maven-构建的-JavaSE-项目（掌握）" class="headerlink" title="六、搭建基于 Maven 构建的 JavaSE 项目（掌握）"></a>六、搭建基于 Maven 构建的 JavaSE 项目（掌握）</h1><h2 id="1、创建项目"><a href="#1、创建项目" class="headerlink" title="1、创建项目"></a>1、创建项目</h2><h3 id="1-1、选择建的是-Maven-项目"><a href="#1-1、选择建的是-Maven-项目" class="headerlink" title="1.1、选择建的是 Maven 项目"></a>1.1、选择建的是 Maven 项目</h3><p><img src="https://img-blog.csdnimg.cn/d1cdd4da994c4ab18add1c66806f3f30.png#pic_center" alt="在这里插入图片描述"></p><p>确定后之后点击 Next。</p><h3 id="1-2、填写对应项目信息"><a href="#1-2、填写对应项目信息" class="headerlink" title="1.2、填写对应项目信息"></a>1.2、填写对应项目信息</h3><p><img src="https://img-blog.csdnimg.cn/047b5379dd2f439da4ec54097f1570e6.png#pic_center" alt="在这里插入图片描述"></p><p>填完之后点击 Next。</p><h3 id="1-3、确定项目存储位置"><a href="#1-3、确定项目存储位置" class="headerlink" title="1.3、确定项目存储位置"></a>1.3、确定项目存储位置</h3><p><img src="https://img-blog.csdnimg.cn/a7ea618837ed4475ad51efebc18fd662.png#pic_center" alt="在这里插入图片描述"></p><p>确定完之后点击 Finish，之后工具会打开解析项目，要等一会儿。</p><h2 id="2、pom-xml-文件"><a href="#2、pom-xml-文件" class="headerlink" title="2、pom.xml 文件"></a>2、pom.xml 文件</h2><p>用于填写项目信息，打包方式，添加依赖及插件等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.wolfcode<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-se<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、添加依赖"><a href="#3、添加依赖" class="headerlink" title="3、添加依赖"></a>3、添加依赖</h2><h3 id="3-1、利用索引添加依赖"><a href="#3-1、利用索引添加依赖" class="headerlink" title="3.1、利用索引添加依赖"></a>3.1、利用索引添加依赖</h3><p>所谓建索引，就对本地仓库的依赖建立索引，若本地仓库存在 10 个依赖，那么在添加的时候可以搜索得出来，很方便在 pom.xml 添加。但注意搜索得出来是本地仓库已有的前提下。而这个索引在 IDEA 开发工具会自动建好，直接使用即可。</p><h4 id="3-1-1、添加-dependencies-元素"><a href="#3-1-1、添加-dependencies-元素" class="headerlink" title="3.1.1、添加 dependencies 元素"></a>3.1.1、添加 dependencies 元素</h4><p>![外链图片转存失败,源站</p><h4 id="3-1-2、添加-dependency-元素"><a href="#3-1-2、添加-dependency-元素" class="headerlink" title="3.1.2、添加 dependency 元素"></a>3.1.2、添加 dependency 元素</h4><p><img src="https://img-blog.csdnimg.cn/d63ac9c48a794e04a5b06dcf485fa931.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-1-3、填选依赖名称"><a href="#3-1-3、填选依赖名称" class="headerlink" title="3.1.3、填选依赖名称"></a>3.1.3、填选依赖名称</h4><p><img src="https://img-blog.csdnimg.cn/6053a7632fb648968252da0e672dbacf.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-1-4、选择依赖的版本"><a href="#3-1-4、选择依赖的版本" class="headerlink" title="3.1.4、选择依赖的版本"></a>3.1.4、选择依赖的版本</h4><p><img src="https://img-blog.csdnimg.cn/0eb2770b24d6450cbb201fb9c43ed0c2.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-1-5、填写依赖的作用域"><a href="#3-1-5、填写依赖的作用域" class="headerlink" title="3.1.5、填写依赖的作用域"></a>3.1.5、填写依赖的作用域</h4><p><img src="https://img-blog.csdnimg.cn/9193e9c4be32429ba10f19531c4810a0.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-1-6、让工具自动解析修改的内容"><a href="#3-1-6、让工具自动解析修改的内容" class="headerlink" title="3.1.6、让工具自动解析修改的内容"></a>3.1.6、让工具自动解析修改的内容</h4><p><img src="https://img-blog.csdnimg.cn/f69137868d6448d380c84488817d7a1b.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-1-7、验证依赖添加成功"><a href="#3-1-7、验证依赖添加成功" class="headerlink" title="3.1.7、验证依赖添加成功"></a>3.1.7、验证依赖添加成功</h4><p><img src="https://img-blog.csdnimg.cn/ee19312c7280450091e292f724e0b247.png#pic_center" alt="在这里插入图片描述"></p><h3 id="3-2、网站搜索拷贝添加依赖"><a href="#3-2、网站搜索拷贝添加依赖" class="headerlink" title="3.2、网站搜索拷贝添加依赖"></a>3.2、网站搜索拷贝添加依赖</h3><p><a href="https://mvnrepository.com/">搜索依赖的网站</a>。<br><img src="https://img-blog.csdnimg.cn/a523f5c396b9443ab3e84db2f111780e.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-2-1、在搜索栏中输入要添加的依赖"><a href="#3-2-1、在搜索栏中输入要添加的依赖" class="headerlink" title="3.2.1、在搜索栏中输入要添加的依赖"></a>3.2.1、在搜索栏中输入要添加的依赖</h4><p><img src="https://img-blog.csdnimg.cn/5eabe2aa88bd4b829d37134faa4acdfe.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-2-2、选择所要的依赖和其版本"><a href="#3-2-2、选择所要的依赖和其版本" class="headerlink" title="3.2.2、选择所要的依赖和其版本"></a>3.2.2、选择所要的依赖和其版本</h4><p><img src="https://img-blog.csdnimg.cn/3ccdca8c23a746ea911fcd36a48cc44e.png#pic_center" alt="在这里插入图片描述"></p><h4 id="3-2-3、拷贝对应配置到-pom-xml-中"><a href="#3-2-3、拷贝对应配置到-pom-xml-中" class="headerlink" title="3.2.3、拷贝对应配置到 pom.xml 中"></a>3.2.3、拷贝对应配置到 pom.xml 中</h4><p><img src="https://img-blog.csdnimg.cn/516efe6aae9e4996ba9b99f56f7d6d00.png#pic_center" alt="在这里插入图片描述"></p><h2 id="4、使用-Maven-命令"><a href="#4、使用-Maven-命令" class="headerlink" title="4、使用 Maven 命令"></a>4、使用 Maven 命令</h2><p>在 Maven Projects 窗口，双击对应命令即可：</p><p><img src="https://img-blog.csdnimg.cn/0622ddc202054e598b052290bf9774ea.png#pic_center" alt="在这里插入图片描述"></p><h1 id="七、搭建基于-Maven-构建的-JavaWeb-项目（掌握）"><a href="#七、搭建基于-Maven-构建的-JavaWeb-项目（掌握）" class="headerlink" title="七、搭建基于 Maven 构建的 JavaWeb 项目（掌握）"></a>七、搭建基于 Maven 构建的 JavaWeb 项目（掌握）</h1><h2 id="1、创建项目-1"><a href="#1、创建项目-1" class="headerlink" title="1、创建项目"></a>1、创建项目</h2><h3 id="1-1、选择建的是-Maven-项目-1"><a href="#1-1、选择建的是-Maven-项目-1" class="headerlink" title="1.1、选择建的是 Maven 项目"></a>1.1、选择建的是 Maven 项目</h3><p><img src="https://img-blog.csdnimg.cn/ab875973d0cc44b08a3d55f7ecccd982.png#pic_center" alt="在这里插入图片描述"></p><p>确定后之后点击 Next。</p><h3 id="1-2、填写对应项目信息-1"><a href="#1-2、填写对应项目信息-1" class="headerlink" title="1.2、填写对应项目信息"></a>1.2、填写对应项目信息</h3><p><img src="https://img-blog.csdnimg.cn/ce7d100b25ca402cb4cbbc87c8b9a477.png#pic_center" alt="在这里插入图片描述"></p><p>填完之后点击 Next。</p><h3 id="1-3、确定项目存储位置-1"><a href="#1-3、确定项目存储位置-1" class="headerlink" title="1.3、确定项目存储位置"></a>1.3、确定项目存储位置</h3><p><img src="https://img-blog.csdnimg.cn/a580365c286241b697d811e6fde1ed34.png#pic_center" alt="在这里插入图片描述"></p><p>确定完之后点击 Finish，之后工具会打开解析项目，要等一会儿。</p><h3 id="1-4、修改项目打包方式"><a href="#1-4、修改项目打包方式" class="headerlink" title="1.4、修改项目打包方式"></a>1.4、修改项目打包方式</h3><p>在 pom.xml 修改：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>cn.wolfcode<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>maven-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 修改项目打包方式 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">packaging</span>&gt;</span>war<span class="hljs-tag">&lt;/<span class="hljs-name">packaging</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2、添加-web-xml"><a href="#2、添加-web-xml" class="headerlink" title="2、添加 web.xml"></a>2、添加 web.xml</h2><p>自己手动在项目的 main 目录下建 webapp&#x2F;WEB-INF&#x2F;web.xml 文件，拷贝如下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;</span></span><br><span class="hljs-tag"><span class="hljs-attr">version</span>=<span class="hljs-string">&quot;3.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="3、修改项目编译运行版本"><a href="#3、修改项目编译运行版本" class="headerlink" title="3、修改项目编译运行版本"></a>3、修改项目编译运行版本</h2><p>在 pom.xml 配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">project.build.sourceEncoding</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>11<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="4、添加依赖"><a href="#4、添加依赖" class="headerlink" title="4、添加依赖"></a>4、添加依赖</h2><p>在 pom.xml 文件添加如下依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 配置 servlet-api 依赖 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.servlet<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>javax.servlet-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 记得一定配置 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="5、编写-Servlet-与-JSP"><a href="#5、编写-Servlet-与-JSP" class="headerlink" title="5、编写 Servlet 与 JSP"></a>5、编写 Servlet 与 JSP</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@WebServlet(&quot;/hello&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">service</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br>        req.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;你好 Maven&quot;</span>);<br>        req.getRequestDispatcher(<span class="hljs-string">&quot;/WEB-INF/a.jsp&quot;</span>).forward(req, resp);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs jsp">&lt;%@ page contentType=<span class="hljs-string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="hljs-string">&quot;java&quot;</span> %&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>    &lt;title&gt;Maven&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>    $&#123;msg&#125;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><h2 id="6、配置-Tomcat-插件"><a href="#6、配置-Tomcat-插件" class="headerlink" title="6、配置 Tomcat 插件"></a>6、配置 Tomcat 插件</h2><p>在 pom.xml 添加如下插件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>80<span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span> <span class="hljs-comment">&lt;!-- 端口 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">path</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">path</span>&gt;</span> <span class="hljs-comment">&lt;!-- 上下路径 --&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">uriEncoding</span>&gt;</span>UTF-8<span class="hljs-tag">&lt;/<span class="hljs-name">uriEncoding</span>&gt;</span> <span class="hljs-comment">&lt;!-- 针对 GET 方式乱码处理 --&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="7、启动项目"><a href="#7、启动项目" class="headerlink" title="7、启动项目"></a>7、启动项目</h2><p><img src="https://img-blog.csdnimg.cn/b12a8450e934474cbed22e19ff76e8ad.png#pic_center" alt="在这里插入图片描述"></p><h1 id="八、概念解释（了解）"><a href="#八、概念解释（了解）" class="headerlink" title="八、概念解释（了解）"></a>八、概念解释（了解）</h1><h2 id="1、坐标"><a href="#1、坐标" class="headerlink" title="1、坐标"></a>1、坐标</h2><h3 id="1-1、数学中的坐标"><a href="#1-1、数学中的坐标" class="headerlink" title="1.1、数学中的坐标"></a>1.1、数学中的坐标</h3><p>在空间中，使用 X、Y、Z 三个向量可以唯一的定位空间中的任意一个点。</p><h3 id="1-2、Maven-中的坐标"><a href="#1-2、Maven-中的坐标" class="headerlink" title="1.2、Maven 中的坐标"></a>1.2、Maven 中的坐标</h3><p>标识项目或者依赖在仓库中的位置。主要由下面构成：</p><ul><li>groupId：项目名称，一般使用公司或组织域名倒写，域名具有唯一性，区分不同公司；</li><li>artifactId：项目中 Maven 项目&#x2F;模块名称，区分同一个公司的项目；</li><li>version：项目版本，区分同一个项目不同时期的特点。</li></ul><h2 id="2、依赖"><a href="#2、依赖" class="headerlink" title="2、依赖"></a>2、依赖</h2><p>配置项目所要依赖的 jar，在 pom.xml 使用 dependency 元素配置，通过坐标先从本地仓库找，若没有再从远程仓库找。</p><h3 id="2-1、scope"><a href="#2-1、scope" class="headerlink" title="2.1、scope"></a>2.1、scope</h3><p>Maven 在编译，测试，运行的时候，各需要一套 classpath（比如编译的时候会有编译的 classpath，测试的时候会有测试的 classpath）。scope 表明该依赖的项目和三个 classpath 的关系，即表示依赖什么阶段起作用，什么阶段不起作用。</p><p>scope 主要可选值：</p><ul><li>compile：默认，适用于所有阶段，会随着项目一起发布，在编译，测试，运行时都有效；</li><li>provided：编译和测试阶段使用；典型的如 servlet-api.jar，打包时不需要，容器来提供；</li><li>runtime：测试和运行阶段使用，用于接口和实现分离，典型的如 jdbc 具体驱动实现；</li><li>test：测试阶段使用，不会随项目发布，如 junit。<br><img src="https://img-blog.csdnimg.cn/e9ffbaa60d084426bd234350c83cde59.png#pic_center" alt="在这里插入图片描述"></li></ul><h3 id="2-2、传递性"><a href="#2-2、传递性" class="headerlink" title="2.2、传递性"></a>2.2、传递性</h3><p>Maven 的依赖是具有传递性的，比如 A -&gt; B，B -&gt; C，那么 A 间接的依赖于 C，这就是依赖的传递性，其中 A 对于 B 是第一直接依赖，B 对于 C 是第二直接依赖，C 为 A 的传递性依赖。依赖的传递性可以解决依赖繁琐的问题。</p><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><ul><li>画标准 Maven 项目树状结构图，并标识什么目录里面放置什么文件。</li><li>完成 Maven 安装及配置。</li><li>完成在开发工具中搭建 Maven 构建 JavaSE 项目，编写编写一个测试类，打印当前系统时间。</li><li>完成在开发工具中使用 Maven 构建 JavaWeb 项目，能处理路径为 &#x2F;hello 请求 ，响应 HTML 格式内容，页面显示 Hello Maven。</li><li>完成对之前 Web CRUD 项目进行改造，使用 Maven 来构建。<br>13878003)]</li></ul><h3 id="2-2、传递性-1"><a href="#2-2、传递性-1" class="headerlink" title="2.2、传递性"></a>2.2、传递性</h3><p>Maven 的依赖是具有传递性的，比如 A -&gt; B，B -&gt; C，那么 A 间接的依赖于 C，这就是依赖的传递性，其中 A 对于 B 是第一直接依赖，B 对于 C 是第二直接依赖，C 为 A 的传递性依赖。依赖的传递性可以解决依赖繁琐的问题。</p><h1 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h1><ul><li>画标准 Maven 项目树状结构图，并标识什么目录里面放置什么文件。</li><li>完成 Maven 安装及配置。</li><li>完成在开发工具中搭建 Maven 构建 JavaSE 项目，编写编写一个测试类，打印当前系统时间。</li><li>完成在开发工具中使用 Maven 构建 JavaWeb 项目，能处理路径为 &#x2F;hello 请求 ，响应 HTML 格式内容，页面显示 Hello Maven。</li><li>完成对之前 Web CRUD 项目进行改造，使用 Maven 来构建。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java,Maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ruoyi项目前后端分离版本部署-linux系统</title>
    <link href="/ixiaoze/2023/02/03/linux/"/>
    <url>/ixiaoze/2023/02/03/linux/</url>
    
    <content type="html"><![CDATA[<h3 id="ruoyi项目前后端分离版本部署-linux系统"><a href="#ruoyi项目前后端分离版本部署-linux系统" class="headerlink" title="ruoyi项目前后端分离版本部署-linux系统"></a><strong>ruoyi项目前后端分离版本部署-linux系统</strong></h3><p><strong>系统环境需求</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">JDK</span> &gt;= <span class="hljs-number">1</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">MySQL</span> &gt;= <span class="hljs-number">5</span>.<span class="hljs-number">7</span><br><span class="hljs-attribute">Maven</span> &gt;= <span class="hljs-number">3</span>.<span class="hljs-number">0</span><br><span class="hljs-attribute">Redis</span><br><span class="hljs-attribute">Node</span>.js<br><span class="hljs-attribute">Nginx</span><br></code></pre></td></tr></table></figure><ul><li><p>新建目录</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#tmp存放临时安装包</span><br>mkdir -p <span class="hljs-regexp">/data/</span>tmp<br><span class="hljs-comment">#service存放软件环境</span><br>mkdir -p <span class="hljs-regexp">/data/</span>service<br><span class="hljs-comment">#gitee存放代码版本控制库</span><br>mkdir -p <span class="hljs-regexp">/data/gi</span>tee<br></code></pre></td></tr></table></figure><p>以上目录非必须，可以自行选择安装路径。</p></li><li><p>JDK &gt;&#x3D; 1.8 (推荐1.8版本)</p><p>从oracle官方网站上下载1.8版本中的最新版的JDK。下载完成后，把文件通过WinSCP或者XFTP上传到服务器上。接着进行解压和配置环境变量。</p><p>下载地址：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#进入安装包目录，解压</span><br>cd <span class="hljs-regexp">/data/</span>tmp<br>tar -zxvf jdk-<span class="hljs-number">8</span>u261-linux-x64.tar.gz<br><br><span class="hljs-comment">#把解压出来的文件夹转移到统一的地方</span><br>mv <span class="hljs-regexp">/data/</span>tmp<span class="hljs-regexp">/jdk1.8.0_261 /</span>data<span class="hljs-regexp">/service/</span>jdk1.<span class="hljs-number">8.0</span>_261<br><br><span class="hljs-comment">#修改环境变量/etc/profile，JAVA_HOME修改为自己的jdk路径。</span><br>vim <span class="hljs-regexp">/etc/</span>profile<br>export  JAVA_HOME=<span class="hljs-regexp">/data/</span>service/jdk1.<span class="hljs-number">8.0</span>_261<br>export  PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$JAVA_HOME</span>/bin<br><br><span class="hljs-comment">#使环境变量生效</span><br>source <span class="hljs-regexp">/etc/</span>profile<br><br><span class="hljs-comment">#检查是否配置成功</span><br>java -version<br></code></pre></td></tr></table></figure></li><li><p>Maven &gt;&#x3D; 3.0</p><p>从Maven官方网站上下载最新版的压缩包。下载完成后，进行解压和配置环境变量。</p><p>下载地址：<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入安装包目录，解压</span><br><span class="hljs-built_in">cd</span> /data/tmp<br>tar -zxvf apache-maven-3.6.3-bin.tar.gz<br><span class="hljs-built_in">mv</span> apache-maven-3.6.3 /data/service/<br><br><span class="hljs-comment">#修改环境变量/etc/profile，MAVEN_HOME修改为自己的路径。</span><br><span class="hljs-built_in">export</span>  MAVEN_HOME=/data/service/apache-maven-3.6.3<br><span class="hljs-built_in">export</span>  PATH=<span class="hljs-variable">$PATH</span>:<span class="hljs-variable">$MAVEN_HOME</span>/bin<br><br><span class="hljs-comment">#使环境变量生效</span><br><span class="hljs-built_in">source</span> /etc/profile<br><br><span class="hljs-comment">#检查是否配置成功</span><br>mvn -v<br></code></pre></td></tr></table></figure></li><li><p>Git</p><p>从git官方网站上下载最新版的安装包，安装即可。</p><p>下载地址：<a href="https://git-scm.com/">https://git-scm.com/</a></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript"><span class="hljs-comment">#通过yum安装，本方法最简单。但是无法控制安装的版本</span><br>yum -y install git<br><br><span class="hljs-comment">#检查是否配置成功</span><br>git <span class="hljs-comment">--version</span><br></code></pre></td></tr></table></figure><p>安装之后，在git仓库中需要添加SSH公钥</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">ssh-keygen -t rsa -C <span class="hljs-string">&quot;xx@xx.com&quot;</span><br>cat ~<span class="hljs-regexp">/.ssh/i</span>d_rsa.pub<br></code></pre></td></tr></table></figure></li><li><p>安装docker</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-comment">#卸载旧版本</span><br>sudo yum remove docker <span class="hljs-string">\</span><br>                  docker-client <span class="hljs-string">\</span><br>                  docker-client-latest <span class="hljs-string">\</span><br>                  docker-common <span class="hljs-string">\</span><br>                  docker-latest <span class="hljs-string">\</span><br>                  docker-latest-logrotate <span class="hljs-string">\</span><br>                  docker-logrotate <span class="hljs-string">\</span><br>                  docker-engine<br><span class="hljs-comment">#安装 Docker Engine-Community</span><br>sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br>sudo yum-config-manager <span class="hljs-string">\</span><br>    --add-repo <span class="hljs-string">\</span><br>    http:<span class="hljs-regexp">//mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="hljs-regexp">sudo yum install docker-ce docker-ce-cli containerd.io</span><br><span class="hljs-regexp">sudo systemctl start docker</span><br></code></pre></td></tr></table></figure><p>注意：如果安装docker-ce报错，可以执行以下语句，再进行安装。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">yum install https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/</span>fedora<span class="hljs-regexp">/30/</span>x86_64<span class="hljs-regexp">/stable/</span>Packages/containerd.io-<span class="hljs-number">1.2</span>.<span class="hljs-number">6</span>-<span class="hljs-number">3.3</span>.fc30.x86_64.rpm<br></code></pre></td></tr></table></figure></li><li><p>Mysql &gt;&#x3D; 5.7 在本机能够有自己的mysql </p><p>安装教程：<a href="https://www.runoob.com/mysql/mysql-install.html">https://www.runoob.com/mysql/mysql-install.html</a></p><p>下载地址：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>访问Mysql的可视化数据库开发工具： Navicat Premium 工具的安装教程可自行百度搜索。</p><p>在Docker中安装MySQL。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#查看可用的 MySQL 版本</span><br>docker search mysql<br><span class="hljs-comment">#拉取5.7版本</span><br>docker pull mysql:<span class="hljs-number">5.7</span><br><span class="hljs-comment">#创建配置文件目录</span><br>mkdir -p <span class="hljs-regexp">/data/</span>docker<span class="hljs-regexp">/mysql/</span>conf<br><span class="hljs-comment">#进入配置文件目录，添加一个配置文件</span><br>vim my.cnf<br><span class="hljs-comment">#启动镜像</span><br>docker run -p <span class="hljs-number">3306</span>:<span class="hljs-number">3306</span> --name mysql -v <span class="hljs-regexp">/data/</span>docker<span class="hljs-regexp">/mysql/</span>conf:<span class="hljs-regexp">/etc/my</span>sql/conf.d -e MYSQL_ROOT_PASSWORD=Vv0IBQ5qST -d mysql:<span class="hljs-number">5.7</span><br></code></pre></td></tr></table></figure><p>注意1：MySQL(5.7.19)的默认配置文件是 &#x2F;etc&#x2F;mysql&#x2F;my.cnf 文件。如果想要自定义配置，建议向 &#x2F;etc&#x2F;mysql&#x2F;conf.d 目录中创建 .cnf 文件。新建的文件可以任意起名，只要保证后缀名是 cnf 即可。</p><p>注意2：在mysql的镜像启动之前，创建配置文件目录，并放置好配置文件。这样mysql启动的时候，就可以直接使用配置好的参数。以下内容是配置数据库的字符集为utf-8。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-section">[mysqld]</span><br><span class="hljs-attr">character-set-server</span>=utf8<br><br><span class="hljs-section">[mysql]</span><br><span class="hljs-attr">default-character-set</span>=utf8<br></code></pre></td></tr></table></figure><p>注意3：如果使用docker进入mysql数据库执行包含中文的sql语句，出现中文乱码的情况，需要在容器系统中设置使用中文包。所以进入docker容器时需要设置环境语言：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#进入docker容器设置env LANG=C.UTF-8</span><br>docker <span class="hljs-built_in">exec</span> -it mysql <span class="hljs-built_in">env</span> LANG=C.UTF-8 bash<br></code></pre></td></tr></table></figure></li><li><p>Redis</p><p>安装教程：<a href="https://www.runoob.com/redis/redis-install.html">https://www.runoob.com/redis/redis-install.html</a></p><p>下载地址：<a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a></p><p>Redis可视化管理工具：[AnotherRedisDesktopManager]:(<a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">https://github.com/qishibo/AnotherRedisDesktopManager/releases</a>)</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">docker</span> pull redis:latest<br><span class="hljs-attribute">docker</span> run -itd --name redis-test -p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> redis<br></code></pre></td></tr></table></figure></li><li><p>Node.js</p><p>安装教程：<a href="https://www.runoob.com/nodejs/nodejs-install-setup.html">https://www.runoob.com/nodejs/nodejs-install-setup.html</a></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">tar xf  <span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">15.4</span>-linux-x64.tar.xz       // 解压<br>cd <span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">15.4</span>-linux-x64/                  // 进入解压目录<br>./bin/<span class="hljs-keyword">node</span> <span class="hljs-title">-v</span>                               // 执行<span class="hljs-keyword">node</span><span class="hljs-title">命令 查看版本</span><br><span class="hljs-title"></span><br><span class="hljs-title">//解压文件的 bin</span> 目录底下包含了 <span class="hljs-keyword">node</span><span class="hljs-title">、npm</span> 等命令，我们可以使用 ln 命令来设置软连接：<br>mv /data/tmp/<span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">15.4</span>-linux-x64 /data/service/<br>ln -s /data/service/<span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">15.4</span>-linux-x64/bin/npm   /usr/local/bin/ <br>ln -s /data/service/<span class="hljs-keyword">node</span><span class="hljs-title">-v14</span>.<span class="hljs-number">15.4</span>-linux-x64/bin/<span class="hljs-keyword">node</span>   <span class="hljs-title">/usr</span>/local/bin/<br></code></pre></td></tr></table></figure></li><li><p>Nginx 安装</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment">#首先安装nginx前置软件</span><br>yum -y install gcc pcre-devel zlib-devel openssl openssl-devel<br><span class="hljs-comment">#下载nginx软件安装包</span><br>cd <span class="hljs-regexp">/data/</span>tmp<br>wget http:<span class="hljs-regexp">//</span>nginx.org<span class="hljs-regexp">/download/</span>nginx-<span class="hljs-number">1.19</span>.<span class="hljs-number">6</span>.tar.gz<br>tar -zxvf nginx-<span class="hljs-number">1.19</span>.<span class="hljs-number">6</span>.tar.gz<br>cd nginx-<span class="hljs-number">1.19</span>.<span class="hljs-number">6</span><br><span class="hljs-comment">#设置安装目录为/usr/local/nginx</span><br>.<span class="hljs-regexp">/configure --prefix=/u</span>sr<span class="hljs-regexp">/local/</span>nginx<br>make<br>make install<br><span class="hljs-comment">#启动nginx</span><br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/nginx/</span>sbin/nginx<br></code></pre></td></tr></table></figure></li></ul><p><strong>后端部署步骤</strong></p><ol><li>从git仓库clone下来最新代码。ruoyi前后端分离版本的gitee地址是<a href="https://gitee.com/y_project/RuoYi-Vuecl">https://gitee.com/y_project/RuoYi-Vuecl</a></li></ol><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-comment">#clone项目源代码</span><br>git <span class="hljs-keyword">clone</span> <span class="hljs-title">git</span>@gitee.com:y_project/RuoYi-Vue.git<br></code></pre></td></tr></table></figure><p>注意：在clone代码之前，需要在gitee管理后台中添加服务器的SSH公钥。详见<a href="https://gitee.com/help/articles/4191">https://gitee.com/help/articles/4191</a></p><ol start="2"><li><p>使用可视化数据库开发工具 Navicat Premium进入数据库管理界面。创建数据库<code>ry-vue</code>并执行数据脚本<code>ry_2021xxxx.sql</code>，<code>quartz.sql</code></p></li><li><p>修改项目中的配置文件，配置文件有两个，分别是application.yml和application-druid.yml。</p></li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/data/gi</span>tee<span class="hljs-regexp">/RuoYi-Vue/</span>ruoyi-admin<span class="hljs-regexp">/src/m</span>ain<span class="hljs-regexp">/resources/</span><br><span class="hljs-comment">#修改application.yml的项目启动端口号</span><br>vim application.yml<br><span class="hljs-comment">#修改application-druid.yml的数据源</span><br>vim application.yml<br></code></pre></td></tr></table></figure><p>修改application.yml的项目启动端口号，修改为18081。修改上传文件路径为&#x2F;data&#x2F;tmp</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">server:</span><br><span class="hljs-symbol">port:</span> <span class="hljs-number">18081</span><br><span class="hljs-symbol"></span><br><span class="hljs-symbol">ruoyi:</span><br><span class="hljs-symbol">profile:</span> <span class="hljs-keyword">/data/</span>tmp<br><br><span class="hljs-meta"># redis 配置</span><br><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">redis:</span><br>        <span class="hljs-meta"># 地址</span><br><span class="hljs-symbol">        host:</span> localhost<br>        <span class="hljs-meta"># 端口，默认为6379</span><br><span class="hljs-symbol">        port:</span> <span class="hljs-number">6379</span><br>        <span class="hljs-meta"># 数据库索引</span><br><span class="hljs-symbol">        database:</span> <span class="hljs-number">0</span><br>        <span class="hljs-meta"># 密码</span><br><span class="hljs-symbol">        password:</span> <br></code></pre></td></tr></table></figure><p>修改application-druid.yml的数据源</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># 数据源配置</span><br><span class="hljs-symbol">spring:</span><br><span class="hljs-symbol">    datasource:</span><br><span class="hljs-symbol">        type:</span> com.alibaba.druid.pool.DruidDataSource<br><span class="hljs-symbol">        driverClassName:</span> com.mysql.cj.jdbc.Driver<br><span class="hljs-symbol">        druid:</span><br>            <span class="hljs-meta"># 主库数据源</span><br><span class="hljs-symbol">            master:</span><br><span class="hljs-symbol">                url:</span> jdbc:mysql:<span class="hljs-comment">//localhost:3306/ry-vue?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span><br><span class="hljs-symbol">                username:</span> root<br><span class="hljs-symbol">                password:</span> Vv0IBQ5qST<br></code></pre></td></tr></table></figure><ol start="4"><li>修改好项目的配置文件之后，把入口项目进行打包。通过mvn打包成一个可执行的jar包。</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cd <span class="hljs-regexp">/data/gi</span>tee<span class="hljs-regexp">/RuoYi-Vue/</span><br>mvn clean install -pl com.ruoyi:ruoyi-admin -am<br></code></pre></td></tr></table></figure><p>打包完成后，&#x2F;data&#x2F;gitee&#x2F;RuoYi-Vue&#x2F;ruoyi-admin&#x2F;target&#x2F;ruoyi-admin.jar就是打包完成后的jar包文件。</p><ol start="5"><li><p>启动项目：把jar复制到程序目录，通过java命令行的方式启动jar包文件。因为本项目是使用了spring boot框架，所以jar中内置了web容器，不需要额外安装tomcat了。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk">mkdir -p <span class="hljs-regexp">/data/</span>app/ruoyi-vue<br>cp <span class="hljs-regexp">/data/gi</span>tee<span class="hljs-regexp">/RuoYi-Vue/</span>ruoyi-admin<span class="hljs-regexp">/target/</span>ruoyi-admin.jar <span class="hljs-regexp">/data/</span>app<span class="hljs-regexp">/ruoyi-vue/</span>ruoyi-admin.jar<br>cd <span class="hljs-regexp">/data/</span>app<span class="hljs-regexp">/ruoyi-vue/</span><br>nohup java -jar ruoyi-admin.jar &amp;<br></code></pre></td></tr></table></figure><p>nohup和&amp;用来表示本命令需要在后台执行，这样退出命令行程序后，java程序也不会停止。</p><ol start="6"><li>查看日志，验证项目是否成功运行。</li></ol></li></ol><p><strong>前端部署步骤</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 进入项目目录</span><br><span class="hljs-built_in">cd</span> /data/gitee/RuoYi-Vue/ruoyi-ui<br><br><span class="hljs-comment">#本地启动的话，可以在这里修改后端接口端口。如果是直接打包的话，不需要修改该配置文件</span><br>vim vue.config.js<br><br><span class="hljs-comment"># 打包正式环境</span><br>npm run build:prod<br><br><span class="hljs-built_in">mkdir</span> /data/app/ruoyi-ui<br><span class="hljs-built_in">mv</span> dist/* /data/app/ruoyi-ui/<br><br><span class="hljs-comment">#把生成好的 dist 文件夹的静态文件发布到你的 nginx 或者静态服务器即可，其中的 index.html 是后台服务的入口页面。</span><br>vim /usr/local/nginx/conf/nginx.conf<br><br>location / &#123;<br>            root   /data/app/ruoyi-ui;<br>try_files <span class="hljs-variable">$uri</span> <span class="hljs-variable">$uri</span>/ /index.html;<br>            index  index.html index.htm;<br>        &#125;<br>        <br>location /prod-api/ &#123;<br>proxy_set_header Host <span class="hljs-variable">$http_host</span>;<br>proxy_set_header X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>proxy_set_header REMOTE-HOST <span class="hljs-variable">$remote_addr</span>;<br>proxy_set_header X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>proxy_pass http://localhost:18081/;<br>&#125;<br><br><span class="hljs-comment">#重新加载配置文件nginx</span><br>/usr/local/nginx/sbin/nginx -s reload<br><br></code></pre></td></tr></table></figure><p>打开浏览器，输入：<a href="http://localhost(默认账户/%E5%AF%86%E7%A0%81">http://localhost（默认账户/密码</a> <code>admin/admin123</code>）<br>若能正确展示登录页面，并能成功登录，菜单及页面展示正常，则表明环境搭建成功。</p><p>提示：node版本需要使用最新的稳定版本，v14.15.4之前的版本可能会打包失败。</p>]]></content>
    
    
    <categories>
      
      <category>liunx</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java,linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何解决Mobax链接不上虚拟机问题</title>
    <link href="/ixiaoze/2022/11/22/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3MobaX%E9%93%BE%E6%8E%A5%E4%B8%8D%E4%B8%8A%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%97%AE%E9%A2%98/"/>
    <url>/ixiaoze/2022/11/22/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3MobaX%E9%93%BE%E6%8E%A5%E4%B8%8D%E4%B8%8A%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h3 id="如何解决Mobax连接问题"><a href="#如何解决Mobax连接问题" class="headerlink" title="如何解决Mobax连接问题"></a>如何解决Mobax连接问题</h3><p>连接超时问题</p><p><img src="https://img-blog.csdnimg.cn/20210930152051127.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBAU2lvYmhhbi4gID8=,size_11,color_FFFFFF,t_70,g_se,x_16" alt="img"></p><p>原因可能有：</p><p>1.linux系统上有没有安装ssh</p><p>直接输入命令 ：ssh</p><p>没有此ssh的话会提示command not find</p><p>可用下载命令进行安装</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">sudo yum ssh <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure><p>2.虚拟机无vm1 或vm8 等虚拟网卡</p><p>可点击vm(我使用的虚拟机是vm)的编辑按钮打开虚拟网络编辑器进行编辑。</p><p>再然后找到pc机上的控制面板\网络和 Internet\网络连接这个路径编辑VMnet8，右键打开属性按钮进行设置:</p><p><img src="https://img-blog.csdnimg.cn/e69c0ad1bb71407bb7601507c20b381e.png#pic_center" alt="img"></p><p>点击tcp&#x2F;ipv4按钮进行手动设置ip也可以设置DNS为8.8.8.8等.(注：这里的设置ip应与虚拟网络编辑器vmnet8的ip前三位一致)</p><p><img src="https://img-blog.csdnimg.cn/81d45db7160c49bdb1e7c63ea0d22d2d.png#pic_center" alt="img"></p><p><img src="https://img-blog.csdnimg.cn/0e0d33feff5840aca226663953c55558.png#pic_center" alt="img"></p><h5 id="设置虚拟机的ifcfg-eth33配置文件"><a href="#设置虚拟机的ifcfg-eth33配置文件" class="headerlink" title="设置虚拟机的ifcfg-eth33配置文件"></a>设置虚拟机的ifcfg-eth33配置文件</h5><p>这个文件所在位置：&#x2F;etc&#x2F;sysconfig&#x2F;network-scripts，在前面加cd 命令即可跳转到该文件夹</p><p><img src="https://img-blog.csdnimg.cn/40734f152ac64e95b5c2259bde619147.png#pic_center" alt="在这里插入图片描述"></p><p>vim ifcfg-ens33文件进行配置 然后 esc 退出 :wq进行文件保存</p><p><img src="https://img-blog.csdnimg.cn/12a228ce652e4bfc97582e87a37ea01b.png#pic_center" alt="在这里插入图片描述"></p><p>设置完成后 进行测试ping 百度 和ping vmnet8(就之前所设置的ip)是否能够ping通，能够ping通，MobaX就可以连接。</p><p><img src="https://img-blog.csdnimg.cn/9d9d87a361454b46b971642fe1aace6c.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/6910cfa199a042dcade20f72e582188a.png#pic_center" alt="在这里插入图片描述"></p><p>如若ping不同如当前所示。（我所遇到的就是这种）本人是直接重启pc机(果然重启能够解决90%的问题哈。。。)然后用pc机ping 了虚拟机就ping 通了（注：这里的192.168.200.4仅为演示，我当初的ip也为192.168.200.1）</p><p><img src="https://img-blog.csdnimg.cn/855a1ecb28674b2ebf4fb16d9a1af0ce.png#pic_center" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/96093ace15864904aabb139c01ce1419.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
    <categories>
      
      <category>Mobax</category>
      
    </categories>
    
    
    <tags>
      
      <tag>pc</tag>
      
      <tag>Vm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>标题</title>
    <link href="/ixiaoze/2022/11/20/%E6%A0%87%E9%A2%98/"/>
    <url>/ixiaoze/2022/11/20/%E6%A0%87%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="我的第一篇博客"><a href="#我的第一篇博客" class="headerlink" title="我的第一篇博客"></a>我的第一篇博客</h1><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;label label-primary&quot;</span>&gt;</span></span>Label  hexo命令<br>更新博客<br>hexo clean 强制清除<br>hexo g 更新拉取<br>hexo d 上传<span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>PS3</tag>
      
      <tag>Games</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
